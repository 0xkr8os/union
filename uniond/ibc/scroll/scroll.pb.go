//lint:file-ignore SA1019 This code is generated
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: union/ibc/lightclients/scroll/v1/scroll.proto

package scroll

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	io "io"
	math "math"
	math_bits "math/bits"
	ethereum "union/ibc/lightclients/ethereum"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScrollFinalizedProof struct {
	BatchIndex         uint64   `protobuf:"varint,1,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	FinalizedStateRoot []byte   `protobuf:"bytes,2,opt,name=finalized_state_root,json=finalizedStateRoot,proto3" json:"finalized_state_root,omitempty"`
	Proof              [][]byte `protobuf:"bytes,3,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ScrollFinalizedProof) Reset()         { *m = ScrollFinalizedProof{} }
func (m *ScrollFinalizedProof) String() string { return proto.CompactTextString(m) }
func (*ScrollFinalizedProof) ProtoMessage()    {}
func (*ScrollFinalizedProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e3898b91859081c, []int{0}
}
func (m *ScrollFinalizedProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScrollFinalizedProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScrollFinalizedProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScrollFinalizedProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrollFinalizedProof.Merge(m, src)
}
func (m *ScrollFinalizedProof) XXX_Size() int {
	return m.Size()
}
func (m *ScrollFinalizedProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrollFinalizedProof.DiscardUnknown(m)
}

var xxx_messageInfo_ScrollFinalizedProof proto.InternalMessageInfo

func (m *ScrollFinalizedProof) GetBatchIndex() uint64 {
	if m != nil {
		return m.BatchIndex
	}
	return 0
}

func (m *ScrollFinalizedProof) GetFinalizedStateRoot() []byte {
	if m != nil {
		return m.FinalizedStateRoot
	}
	return nil
}

func (m *ScrollFinalizedProof) GetProof() [][]byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type ClientState struct {
	L1ClientId                    string        `protobuf:"bytes,1,opt,name=l1_client_id,json=l1ClientId,proto3" json:"l1_client_id,omitempty"`
	ChainId                       string        `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	LatestBatchIndex              uint64        `protobuf:"varint,3,opt,name=latest_batch_index,json=latestBatchIndex,proto3" json:"latest_batch_index,omitempty"`
	FrozenHeight                  *types.Height `protobuf:"bytes,4,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	RollupContractAddress         []byte        `protobuf:"bytes,5,opt,name=rollup_contract_address,json=rollupContractAddress,proto3" json:"rollup_contract_address,omitempty"`
	RollupFinalizedStateRootsSlot []byte        `protobuf:"bytes,6,opt,name=rollup_finalized_state_roots_slot,json=rollupFinalizedStateRootsSlot,proto3" json:"rollup_finalized_state_roots_slot,omitempty"`
	IbcContractAddress            []byte        `protobuf:"bytes,7,opt,name=ibc_contract_address,json=ibcContractAddress,proto3" json:"ibc_contract_address,omitempty"`
	IbcCommitmentSlot             []byte        `protobuf:"bytes,8,opt,name=ibc_commitment_slot,json=ibcCommitmentSlot,proto3" json:"ibc_commitment_slot,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e3898b91859081c, []int{1}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

func (m *ClientState) GetL1ClientId() string {
	if m != nil {
		return m.L1ClientId
	}
	return ""
}

func (m *ClientState) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ClientState) GetLatestBatchIndex() uint64 {
	if m != nil {
		return m.LatestBatchIndex
	}
	return 0
}

func (m *ClientState) GetFrozenHeight() *types.Height {
	if m != nil {
		return m.FrozenHeight
	}
	return nil
}

func (m *ClientState) GetRollupContractAddress() []byte {
	if m != nil {
		return m.RollupContractAddress
	}
	return nil
}

func (m *ClientState) GetRollupFinalizedStateRootsSlot() []byte {
	if m != nil {
		return m.RollupFinalizedStateRootsSlot
	}
	return nil
}

func (m *ClientState) GetIbcContractAddress() []byte {
	if m != nil {
		return m.IbcContractAddress
	}
	return nil
}

func (m *ClientState) GetIbcCommitmentSlot() []byte {
	if m != nil {
		return m.IbcCommitmentSlot
	}
	return nil
}

type ConsensusState struct {
	BatchIndex     uint64 `protobuf:"varint,1,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	IbcStorageRoot []byte `protobuf:"bytes,2,opt,name=ibc_storage_root,json=ibcStorageRoot,proto3" json:"ibc_storage_root,omitempty"`
	Timestamp      uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e3898b91859081c, []int{2}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

func (m *ConsensusState) GetBatchIndex() uint64 {
	if m != nil {
		return m.BatchIndex
	}
	return 0
}

func (m *ConsensusState) GetIbcStorageRoot() []byte {
	if m != nil {
		return m.IbcStorageRoot
	}
	return nil
}

func (m *ConsensusState) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Header struct {
	L1Height        *types.Height          `protobuf:"bytes,1,opt,name=l1_height,json=l1Height,proto3" json:"l1_height,omitempty"`
	L1AccountProof  *ethereum.AccountProof `protobuf:"bytes,2,opt,name=l1_account_proof,json=l1AccountProof,proto3" json:"l1_account_proof,omitempty"`
	FinalizedProof  *ScrollFinalizedProof  `protobuf:"bytes,3,opt,name=finalized_proof,json=finalizedProof,proto3" json:"finalized_proof,omitempty"`
	IbcAccountProof *ethereum.AccountProof `protobuf:"bytes,4,opt,name=ibc_account_proof,json=ibcAccountProof,proto3" json:"ibc_account_proof,omitempty"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e3898b91859081c, []int{3}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetL1Height() *types.Height {
	if m != nil {
		return m.L1Height
	}
	return nil
}

func (m *Header) GetL1AccountProof() *ethereum.AccountProof {
	if m != nil {
		return m.L1AccountProof
	}
	return nil
}

func (m *Header) GetFinalizedProof() *ScrollFinalizedProof {
	if m != nil {
		return m.FinalizedProof
	}
	return nil
}

func (m *Header) GetIbcAccountProof() *ethereum.AccountProof {
	if m != nil {
		return m.IbcAccountProof
	}
	return nil
}

func init() {
	proto.RegisterType((*ScrollFinalizedProof)(nil), "union.ibc.lightclients.scroll.v1.ScrollFinalizedProof")
	proto.RegisterType((*ClientState)(nil), "union.ibc.lightclients.scroll.v1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "union.ibc.lightclients.scroll.v1.ConsensusState")
	proto.RegisterType((*Header)(nil), "union.ibc.lightclients.scroll.v1.Header")
}

func init() {
	proto.RegisterFile("union/ibc/lightclients/scroll/v1/scroll.proto", fileDescriptor_4e3898b91859081c)
}

var fileDescriptor_4e3898b91859081c = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6e, 0xda, 0x4e,
	0x10, 0xc6, 0x40, 0x08, 0x2c, 0xfc, 0x08, 0xbf, 0x2d, 0x55, 0x5d, 0xd4, 0x38, 0x2e, 0x27, 0x0e,
	0xad, 0x89, 0x5b, 0x29, 0x39, 0x56, 0x09, 0x52, 0x04, 0xb7, 0xca, 0xdc, 0xa2, 0x4a, 0x2b, 0x7b,
	0xbd, 0x84, 0x95, 0xd6, 0x5e, 0xe4, 0x5d, 0x50, 0x9b, 0x4b, 0x5f, 0xa1, 0x2f, 0xd0, 0xf7, 0xe9,
	0x31, 0xc7, 0x1e, 0x7a, 0xa8, 0xe0, 0x45, 0xaa, 0xdd, 0x35, 0x81, 0xfc, 0x2b, 0x52, 0x6f, 0x3b,
	0xf3, 0xcd, 0x37, 0x33, 0x9e, 0x6f, 0xc6, 0xe0, 0xed, 0x3c, 0xa5, 0x3c, 0xed, 0xd3, 0x08, 0xf7,
	0x19, 0xbd, 0x9a, 0x4a, 0xcc, 0x28, 0x49, 0xa5, 0xe8, 0x0b, 0x9c, 0x71, 0xc6, 0xfa, 0x0b, 0x3f,
	0x7f, 0x79, 0xb3, 0x8c, 0x4b, 0x0e, 0x5d, 0x1d, 0xee, 0xd1, 0x08, 0x7b, 0xdb, 0xe1, 0x5e, 0x1e,
	0xb4, 0xf0, 0x3b, 0x47, 0x2a, 0x15, 0xe6, 0x19, 0xe9, 0x1b, 0x4c, 0xa5, 0x30, 0x2f, 0x93, 0xa2,
	0xe3, 0x3f, 0x51, 0x91, 0xc8, 0x29, 0xc9, 0xc8, 0x3c, 0x51, 0x84, 0xf5, 0xdb, 0x50, 0xba, 0x5f,
	0x41, 0x7b, 0xac, 0x0b, 0x5c, 0xd0, 0x34, 0x64, 0xf4, 0x9a, 0xc4, 0x1f, 0x33, 0xce, 0x27, 0xf0,
	0x08, 0xd4, 0xa3, 0x50, 0xe2, 0x29, 0xa2, 0x69, 0x4c, 0x3e, 0xdb, 0x96, 0x6b, 0xf5, 0xca, 0x01,
	0xd0, 0xae, 0x91, 0xf2, 0xc0, 0x63, 0xd0, 0x9e, 0xac, 0x29, 0x48, 0xc8, 0x50, 0x12, 0x94, 0x71,
	0x2e, 0xed, 0xa2, 0x6b, 0xf5, 0x1a, 0x01, 0xbc, 0xc5, 0xc6, 0x0a, 0x0a, 0x38, 0x97, 0xb0, 0x0d,
	0xf6, 0x66, 0x2a, 0xb7, 0x5d, 0x72, 0x4b, 0xbd, 0x46, 0x60, 0x8c, 0xee, 0xf7, 0x12, 0xa8, 0x0f,
	0x74, 0x9f, 0x3a, 0x12, 0xba, 0xa0, 0xc1, 0x7c, 0x64, 0x3a, 0x47, 0x34, 0xd6, 0x95, 0x6b, 0x01,
	0x60, 0xbe, 0x09, 0x1a, 0xc5, 0xf0, 0x25, 0xa8, 0xe2, 0x69, 0x48, 0x53, 0x85, 0x16, 0x35, 0xba,
	0xaf, 0xed, 0x51, 0x0c, 0xdf, 0x00, 0xc8, 0x42, 0x49, 0x84, 0x44, 0xdb, 0xcd, 0x97, 0x74, 0xf3,
	0x2d, 0x83, 0x9c, 0x6f, 0x3e, 0xe1, 0x03, 0xf8, 0x6f, 0x92, 0xf1, 0x6b, 0x92, 0xa2, 0x29, 0x51,
	0xe3, 0xb2, 0xcb, 0xae, 0xd5, 0xab, 0xbf, 0xeb, 0x68, 0x0d, 0xd4, 0x9c, 0xbd, 0x7c, 0xba, 0x0b,
	0xdf, 0x1b, 0xea, 0x88, 0xa0, 0x61, 0x08, 0xc6, 0x82, 0x27, 0xe0, 0x85, 0x1a, 0xdd, 0x7c, 0x86,
	0x30, 0x4f, 0x65, 0x16, 0x62, 0x89, 0xc2, 0x38, 0xce, 0x88, 0x10, 0xf6, 0x9e, 0x1e, 0xc3, 0x73,
	0x03, 0x0f, 0x72, 0xf4, 0xcc, 0x80, 0x70, 0x08, 0x5e, 0xe7, 0xbc, 0xc7, 0x46, 0x28, 0x90, 0x60,
	0x5c, 0xda, 0x15, 0x9d, 0xe1, 0xd0, 0x04, 0x5e, 0x3c, 0x18, 0xa7, 0x18, 0x33, 0x2e, 0x95, 0x0a,
	0x34, 0xc2, 0x0f, 0xcb, 0xef, 0x1b, 0x15, 0x68, 0x84, 0xef, 0xd7, 0xf6, 0xc0, 0x33, 0xc3, 0x48,
	0x12, 0x2a, 0x13, 0x35, 0x64, 0x5d, 0xad, 0xaa, 0x09, 0xff, 0x6b, 0xc2, 0x1a, 0x51, 0x15, 0xba,
	0x5f, 0x40, 0x73, 0xc0, 0x53, 0x41, 0x52, 0x31, 0x17, 0x46, 0xa1, 0x9d, 0xab, 0xd1, 0x03, 0x2d,
	0x55, 0x42, 0x48, 0x9e, 0x85, 0x57, 0x77, 0xd6, 0xa2, 0x49, 0x23, 0x3c, 0x36, 0x6e, 0xbd, 0x12,
	0xaf, 0x40, 0x4d, 0xd2, 0x84, 0x08, 0x19, 0x26, 0xb3, 0x5c, 0xa6, 0x8d, 0xa3, 0xfb, 0xab, 0x08,
	0x2a, 0x43, 0x12, 0xc6, 0x24, 0x83, 0xa7, 0xa0, 0xc6, 0xfc, 0xb5, 0x4c, 0xd6, 0x4e, 0x99, 0xaa,
	0xcc, 0xcf, 0x25, 0xba, 0x04, 0x2d, 0xe6, 0xa3, 0x10, 0x63, 0x3e, 0x4f, 0x25, 0x32, 0xfb, 0x57,
	0xd4, 0xfc, 0x63, 0xef, 0x89, 0x83, 0xbb, 0xbd, 0x90, 0x85, 0xef, 0x9d, 0x19, 0xa2, 0xbe, 0x89,
	0xa0, 0xc9, 0xfc, 0x6d, 0x1b, 0x22, 0x70, 0xb0, 0xd1, 0x6f, 0xbd, 0xda, 0x2a, 0xf5, 0x89, 0xb7,
	0xeb, 0x96, 0xbd, 0xc7, 0x8e, 0x2e, 0x68, 0x4e, 0xee, 0x1e, 0xe1, 0x27, 0xa0, 0x04, 0xb9, 0xd7,
	0x7d, 0xf9, 0x1f, 0xbb, 0x3f, 0xa0, 0x11, 0xde, 0x76, 0x9c, 0x9f, 0xfe, 0x58, 0x3a, 0xd6, 0xcd,
	0xd2, 0xb1, 0x7e, 0x2f, 0x1d, 0xeb, 0xdb, 0xca, 0x29, 0xdc, 0xac, 0x9c, 0xc2, 0xcf, 0x95, 0x53,
	0xb8, 0x3c, 0xfc, 0xeb, 0x9f, 0x2b, 0xaa, 0xe8, 0x5f, 0xc7, 0xfb, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x82, 0x24, 0x24, 0x12, 0xe1, 0x04, 0x00, 0x00,
}

func (m *ScrollFinalizedProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScrollFinalizedProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScrollFinalizedProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proof[iNdEx])
			copy(dAtA[i:], m.Proof[iNdEx])
			i = encodeVarintScroll(dAtA, i, uint64(len(m.Proof[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FinalizedStateRoot) > 0 {
		i -= len(m.FinalizedStateRoot)
		copy(dAtA[i:], m.FinalizedStateRoot)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.FinalizedStateRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.BatchIndex != 0 {
		i = encodeVarintScroll(dAtA, i, uint64(m.BatchIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcCommitmentSlot) > 0 {
		i -= len(m.IbcCommitmentSlot)
		copy(dAtA[i:], m.IbcCommitmentSlot)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.IbcCommitmentSlot)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IbcContractAddress) > 0 {
		i -= len(m.IbcContractAddress)
		copy(dAtA[i:], m.IbcContractAddress)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.IbcContractAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RollupFinalizedStateRootsSlot) > 0 {
		i -= len(m.RollupFinalizedStateRootsSlot)
		copy(dAtA[i:], m.RollupFinalizedStateRootsSlot)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.RollupFinalizedStateRootsSlot)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RollupContractAddress) > 0 {
		i -= len(m.RollupContractAddress)
		copy(dAtA[i:], m.RollupContractAddress)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.RollupContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FrozenHeight != nil {
		{
			size, err := m.FrozenHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScroll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LatestBatchIndex != 0 {
		i = encodeVarintScroll(dAtA, i, uint64(m.LatestBatchIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.L1ClientId) > 0 {
		i -= len(m.L1ClientId)
		copy(dAtA[i:], m.L1ClientId)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.L1ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintScroll(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IbcStorageRoot) > 0 {
		i -= len(m.IbcStorageRoot)
		copy(dAtA[i:], m.IbcStorageRoot)
		i = encodeVarintScroll(dAtA, i, uint64(len(m.IbcStorageRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.BatchIndex != 0 {
		i = encodeVarintScroll(dAtA, i, uint64(m.BatchIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IbcAccountProof != nil {
		{
			size, err := m.IbcAccountProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScroll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FinalizedProof != nil {
		{
			size, err := m.FinalizedProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScroll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.L1AccountProof != nil {
		{
			size, err := m.L1AccountProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScroll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.L1Height != nil {
		{
			size, err := m.L1Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScroll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintScroll(dAtA []byte, offset int, v uint64) int {
	offset -= sovScroll(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScrollFinalizedProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchIndex != 0 {
		n += 1 + sovScroll(uint64(m.BatchIndex))
	}
	l = len(m.FinalizedStateRoot)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	if len(m.Proof) > 0 {
		for _, b := range m.Proof {
			l = len(b)
			n += 1 + l + sovScroll(uint64(l))
		}
	}
	return n
}

func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.L1ClientId)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	if m.LatestBatchIndex != 0 {
		n += 1 + sovScroll(uint64(m.LatestBatchIndex))
	}
	if m.FrozenHeight != nil {
		l = m.FrozenHeight.Size()
		n += 1 + l + sovScroll(uint64(l))
	}
	l = len(m.RollupContractAddress)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	l = len(m.RollupFinalizedStateRootsSlot)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	l = len(m.IbcContractAddress)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	l = len(m.IbcCommitmentSlot)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchIndex != 0 {
		n += 1 + sovScroll(uint64(m.BatchIndex))
	}
	l = len(m.IbcStorageRoot)
	if l > 0 {
		n += 1 + l + sovScroll(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovScroll(uint64(m.Timestamp))
	}
	return n
}

func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L1Height != nil {
		l = m.L1Height.Size()
		n += 1 + l + sovScroll(uint64(l))
	}
	if m.L1AccountProof != nil {
		l = m.L1AccountProof.Size()
		n += 1 + l + sovScroll(uint64(l))
	}
	if m.FinalizedProof != nil {
		l = m.FinalizedProof.Size()
		n += 1 + l + sovScroll(uint64(l))
	}
	if m.IbcAccountProof != nil {
		l = m.IbcAccountProof.Size()
		n += 1 + l + sovScroll(uint64(l))
	}
	return n
}

func sovScroll(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScroll(x uint64) (n int) {
	return sovScroll(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScrollFinalizedProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScrollFinalizedProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScrollFinalizedProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIndex", wireType)
			}
			m.BatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedStateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedStateRoot = append(m.FinalizedStateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedStateRoot == nil {
				m.FinalizedStateRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, make([]byte, postIndex-iNdEx))
			copy(m.Proof[len(m.Proof)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBatchIndex", wireType)
			}
			m.LatestBatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrozenHeight == nil {
				m.FrozenHeight = &types.Height{}
			}
			if err := m.FrozenHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupContractAddress = append(m.RollupContractAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RollupContractAddress == nil {
				m.RollupContractAddress = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupFinalizedStateRootsSlot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupFinalizedStateRootsSlot = append(m.RollupFinalizedStateRootsSlot[:0], dAtA[iNdEx:postIndex]...)
			if m.RollupFinalizedStateRootsSlot == nil {
				m.RollupFinalizedStateRootsSlot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcContractAddress = append(m.IbcContractAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.IbcContractAddress == nil {
				m.IbcContractAddress = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcCommitmentSlot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcCommitmentSlot = append(m.IbcCommitmentSlot[:0], dAtA[iNdEx:postIndex]...)
			if m.IbcCommitmentSlot == nil {
				m.IbcCommitmentSlot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIndex", wireType)
			}
			m.BatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcStorageRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcStorageRoot = append(m.IbcStorageRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.IbcStorageRoot == nil {
				m.IbcStorageRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScroll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L1Height == nil {
				m.L1Height = &types.Height{}
			}
			if err := m.L1Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1AccountProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L1AccountProof == nil {
				m.L1AccountProof = &ethereum.AccountProof{}
			}
			if err := m.L1AccountProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizedProof == nil {
				m.FinalizedProof = &ScrollFinalizedProof{}
			}
			if err := m.FinalizedProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcAccountProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScroll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScroll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcAccountProof == nil {
				m.IbcAccountProof = &ethereum.AccountProof{}
			}
			if err := m.IbcAccountProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScroll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScroll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScroll(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScroll
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScroll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScroll
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScroll
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScroll
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScroll        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScroll          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScroll = fmt.Errorf("proto: unexpected end of group")
)
