name: Deploy Site

on:
  push:
    branches:
      - main
    paths:
      - 'site/**'
  pull_request:
    paths:
      - 'site/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  NIX_VERSION: nix-2.13.2
  NIXPKGS_CHANNEL: nixos-22.11
  NODE_OPTIONS: '--no-warnings'
  ACTIONS_RUNNER_DEBUG: true
  ASTRO_TELEMETRY_DISABLED: true


jobs:
  build:
    uses: unionlabs/workflows/.github/workflows/build.yml@329b802dafe949a7a93b6e6a5bf5065c3a81ab30
    secrets:
      nixbuild_token: ${{ secrets.nixbuild_token }}
      access-tokens: github.com=${{ secrets.GITHUB_TOKEN }}
    with:
      filter_builds: '(.top_attr == "packages") and (.system == "x86_64-linux") and (.attr == "site")'
    
  deploy-preview:
    runs-on: ['ubuntu-latest']
    needs: [build]
    permissions:
      contents: read
      pull-requests: write
    env:
      npm_config_yes: true
    environment: 'site-preview'
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: packages.x86_64-linux.site
      - uses: nixbuild/nix-quick-install-action@v26
      - uses: nixbuild/nixbuild-action@master
        with:
          nixbuild_token: ${{ secrets.nixbuild_token }}
      - run: mkdir dump
      - run: nix copy --to file://`pwd`/dump --from ssh-ng://eu.nixbuild.net `cat result.json | jq -r '.packages."x86_64-linux".site.outputs.out'` --extra-experimental-features nix-command
      - run: cat dump/nar/*.nar.xz | xz -dc | nix-store --restore result

      - name: '[preview] ðŸ”¶ Publish to Cloudflare Pages'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_WORKERS_API_TOKEN }}
        run: npx --yes wrangler@latest pages --project-name="site" deploy result >> /tmp/site_deploy.txt

      - name: Link Check
        id: lychee
        uses: lycheeverse/lychee-action@v1.9.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: |
            'result/**/index.html'

      - name: Comment On Pull Request
        uses: actions/github-script@v7
        # only comment if there are errors and it's a pull request
        if: env.lychee_exit_code != 0
        # temporarily allow this to fail until we're able to handle these two links: https://github.com/unionlabs/union/actions/runs/8014925873/attempts/1#summary-21894317581
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('node:fs');
            const content = fs.readFileSync('./lychee/out.md', { encoding: 'utf8' });
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: content
            });

      - name: Set Deploy Output
        run: |
          {
            echo 'DEPLOY_OUTPUT<<EOF'
            tail -n 2 /tmp/site_deploy.txt
            echo 'EOF'
          } >> $GITHUB_ENV

      - name: Comment on Pull Request
        uses: actions/github-script@v7
        env:
          LAST_UPDATED_AT: ${{ github.event.repository.updated_at }}
        with:
          debug: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `
              <h1>Site/Docs ðŸ¤ </h1>
              ${process.env.DEPLOY_OUTPUT}

              **${process.env.LAST_UPDATED_AT}**
            `
            const prComments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const [botDeploymentComment] = prComments.data.filter(comment => comment.body.includes('Site/Docs ðŸ¤ '))
            if (!botDeploymentComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              })
            } else {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botDeploymentComment.id,
                body: commentBody
              })
            }

  deploy-manual:
    runs-on: ['ubuntu-latest']
    needs: [build]
    permissions: write-all
    env:
      npm_config_yes: true
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          github_access_token: ${{ github.token }}
      - run: |
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update

      - name: Build Site
        run: nix build .#site

        # create preview deployment when trigger is workflow_dispatch && branch is not main
      - name: '[workflow-dispatch] ðŸ”¶ Publish to Cloudflare Pages'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_WORKERS_API_TOKEN }}
        run: npx --yes wrangler@latest pages --project-name="site" deploy result

  deploy-production:
    runs-on: ['ubuntu-latest']
    needs: [build]
    permissions: write-all
    env:
      npm_config_yes: true
    environment: 'site-production'
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          github_access_token: ${{ github.token }}
      - run: |
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update

      - name: Build Site
        run: nix build .#site

      - name: '[production] ðŸ”¶ Publish to Cloudflare Pages'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_WORKERS_API_TOKEN }}
        run: npx --yes wrangler@latest pages --project-name="site" --branch="main" deploy result
