---
import { Image } from "astro:assets"
import Layout from "#/layouts/Layout.astro"
import type { BlogPost } from "#/lib/types.ts"
import { contentfulClient } from "#/lib/contentful.ts"
import LanderSection from "#/components/LanderSection.astro"
import { toISODate, saneDateTime } from "#/lib/utilities.ts"
import { BLOCKS, INLINES } from "@contentful/rich-text-types"
import SocialsSection from "#/components/sections/SocialsSection.astro"
import { documentToHtmlString } from "@contentful/rich-text-html-renderer"

export const prerender = false

const { slug } = Astro.params

const {
  items: [blogPost]
} = await contentfulClient.getEntries<BlogPost>({
  "fields.slug": slug,
  content_type: "blog"
})
// The browser should always check freshness
Astro.response.headers.set("cache-control", "public, max-age=0, must-revalidate")

// The CDN should cache for a year, but revalidate if the cache tag changes
Astro.response.headers.set("netlify-cdn-cache-control", "s-maxage=31536000")

// Tag the page with the blog post slug
if (slug) Astro.response.headers.set("netlify-cache-tag", slug)

const imageWithProtocol = (url: string) => `https:${url}`

// @ts-expect-error
const coverFileds = blogPost.fields.cover.fields
const imageUrl = imageWithProtocol(coverFileds.file.url)
const { width, height } = coverFileds.file.details.image as { width: number; height: number }
---

<Layout
  image={imageUrl}
  url={Astro.url.href}
  title={blogPost.fields.title}
  description={blogPost.fields.description}
>
  <LanderSection gradient="to-t">
    <div class="max-w-2xl self-center md:text-lg text-gray-300">
      <div class="text-lg">
        <time class="text-lg text-gray-400" datetime={toISODate(blogPost.fields.date)}>
          {saneDateTime(blogPost.fields.date)}
        </time>
      </div>
      <h1 class="text-3xl sm:text-4xl font-extrabold mb-0">
        {blogPost.fields.title}
      </h1>
      <Image {width} {height} src={imageUrl} loading="eager" alt={coverFileds.title} />
      <p>
        <em>{blogPost.fields.description}</em>
      </p>
      <article
        set:html={documentToHtmlString(blogPost.fields.content, {
          renderNode: {
            [BLOCKS['EMBEDDED_ASSET']]: asset => {
              const dataFields = asset.data.target.fields
              const imageUrl = imageWithProtocol(dataFields.file.url)
              const { width, height } = dataFields.file.details.image
              return `<Image src="${imageUrl}" alt="${dataFields.title}" width={${width}} height={${height}} />`
            },
            [INLINES['HYPERLINK']]: params => /* html */ `
              <a 
                target="_blank"
                href="${params.data.uri}"
                rel="noopener noreferrer">${(params.content.at(0) as any)?.value}</a>`,
          },
        })}
      />
    </div>
  </LanderSection>
  <SocialsSection />
</Layout>

<script is:inline type="module" src="/scripts/anchor-targets.js"></script>

<style is:inline lang="postcss">
  h1 {
    color: white !important; 
  }
  img {
    width: 100%;
    height: auto;
    object-fit: cover;
    border-radius: 8px !important;
  }

  p > a, ul a:not(header a), ol a:not(header a) {
    text-decoration: underline;
    text-decoration-color: #A0ECFD !important;
    transition: border-bottom-color 0.2s ease-in-out;
    color: #A0ECFD !important;
  }

  p, q, blockquote {
    margin-bottom: 1rem;
    color: #D1D5DB;
  }


  p > a:hover {
    color: #A0ECFD;
  }

  ol, ul {
    li {
      color: #D1D5DB;
    }
    margin-bottom: 1rem;
  }
  @media (max-width: 640px) {
    p > a:hover {
      color: #A0ECFD;
      text-decoration-color: #fff !important;
    }
    h2 {
      font-size: 1.5rem !important;
    }
  }

  h2,h3,h4,h5 {
    margin-top: 2rem;
    margin-bottom: 0rem;
    font-size: 1.87rem;
    color: #ffffff;
  }

  h2::after, h3::after, h4::after, h5::after {
    content: "#";
    color: #ffffff;
    margin-left: 0.5rem;
    font-size: 1.5rem;
    position: relative;
    visibility: hidden;
  }

  h2:hover::after, h3:hover::after, h4:hover::after, h5:hover::after {
    visibility: visible;
  }

  *::selection {
    background-color: #A0ECFD;
    color: #000;
  }
</style>
