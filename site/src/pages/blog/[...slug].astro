---
import { Image } from "astro:assets"
import Layout from "#/layouts/Layout.astro"
import type { BlogPost } from "#/lib/types.ts"
import LanderSection from "#/components/LanderSection.astro"
import { toISODate, saneDateTime } from "#/lib/utilities.ts"
import { contentfulClient } from "#/lib/contentful/client.ts"
import { ContentfulLivePreview } from "@contentful/live-preview"
import SocialsSection from "#/components/sections/SocialsSection.astro"

export const prerender = false

const { slug } = Astro.params

const {
  items: [blogPost]
} = await contentfulClient.getEntries<BlogPost>({
  limit: 1,
  "fields.slug": slug,
  content_type: "blog",
  select: [
    "sys.id", // entry id
    "fields.date",
    "fields.slug",
    "fields.date",
    "fields.title",
    "fields.cover",
    "fields.author",
    "fields.hidden",
    "fields.content",
    "fields.description"
  ]
})

// The browser should always check freshness
Astro.response.headers.set("cache-control", "public, max-age=0, must-revalidate")

// The CDN should cache for a year, but revalidate if the cache tag changes
Astro.response.headers.set("netlify-cdn-cache-control", "s-maxage=31536000")

// Tag the page with the blog post slug
if (slug) Astro.response.headers.set("netlify-cache-tag", slug)

const imageWithProtocol = (url: string) => `https:${url}`

const entryId = blogPost.sys.id

// @ts-expect-error
const coverFields = blogPost.fields.cover.fields
const imageUrl = imageWithProtocol(coverFields.file.url)
const { width, height } = coverFields.file.details.image as {
  width: number
  height: number
}
---

<Layout
  image={imageUrl}
  url={Astro.url.href}
  title={blogPost.fields.title}
  description={blogPost.fields.description}
>
  <LanderSection gradient="to-t">
    <div class="max-w-2xl self-center md:text-lg text-gray-300">
      <div class="text-lg flex gap-x-3 h-min">
        <h1
          data-contentful-field-id="title"
          data-contentful-entry-id={entryId}
          class="text-3xl sm:text-4xl font-extrabold mb-0"
          {...ContentfulLivePreview.getProps({ entryId, fieldId: "title" })}
        >
          {blogPost.fields.title}
        </h1>
      </div>
      <div class="flex gap-x-3 mt-1.5">
        <time
          class="text-lg text-gray-400"
          data-contentful-field-id="date"
          data-contentful-entry-id={entryId}
          datetime={toISODate(blogPost.fields.date)}
          {...ContentfulLivePreview.getProps({ entryId, fieldId: "date" })}
        >
          {saneDateTime(blogPost.fields.date)}
        </time>
        -
        <p
          class="m-0"
          data-contentful-field-id="author"
          data-contentful-entry-id={entryId}
          {...ContentfulLivePreview.getProps({ entryId, fieldId: "author" })}
        >
          {blogPost.fields.author}
        </p>
      </div>
      <Image
        {width}
        {height}
        class="my-3"
        src={`https://ipx.up.railway.app/f_png,s_1344x706/${imageUrl}`}
        loading="eager"
        alt={coverFields.title}
        data-contentful-field-id="cover"
        data-contentful-entry-id={entryId}
        {...ContentfulLivePreview.getProps({ entryId, fieldId: "cover" })}
      />
      <p>
        <em
          class="hidden"
          data-contentful-entry-id={entryId}
          data-contentful-field-id="description"
          {...ContentfulLivePreview.getProps({
            entryId,
            fieldId: "description"
          })}
        >
          {blogPost.fields.description}
        </em>
      </p>
      <article
        data-contentful-field-id="content"
        data-contentful-entry-id={entryId}
        {...ContentfulLivePreview.getProps({ entryId, fieldId: "content" })}
      >
      </article>
    </div>
  </LanderSection>
  <SocialsSection />
</Layout>

<script>
  import { ContentfulLivePreview } from "@contentful/live-preview"
  import { BLOCKS, INLINES, MARKS } from "@contentful/rich-text-types"
  import { documentToHtmlString } from "@contentful/rich-text-html-renderer"
  // @ts-expect-error
  import * as contentful from "node_modules/contentful/dist/contentful.browser.min.js"

  type ConfigOptions = {
    locale: string
    entryId: string
    debugMode: boolean
    fields: Array<string>
    subscriptions: Array<VoidFunction>
  }

  const subscriptions: Array<VoidFunction> = []
  console.info("[initializeContentfulLivePreview]", subscriptions)

  document.addEventListener("DOMContentLoaded", () => {
    const emElement = document.querySelector("h1[data-contentful-entry-id]")
    const entryId = emElement?.dataset.contentfulEntryId
    if (!entryId) return
    initializeContentfulLivePreview({
      entryId,
      locale: "en-US",
      debugMode: import.meta.env.MODE === "development",
      subscriptions,
      fields: [
        "date",
        "date",
        "title",
        "cover",
        "author",
        "content",
        "description"
      ]
    })
  })

  function initializeContentfulLivePreview({
    locale,
    fields,
    entryId,
    debugMode
  }: ConfigOptions) {
    const contentfulClient = contentful.createClient({
      space: "pf7z332xkown",
      host: "preview.contentful.com",
      /**
       * this token will be revoked before porting to own repo
       */
      accessToken: "Du9sF4eDPHdNyXN7hZTeWyyEB6tV7i2BuOyvUbrE-Uo"
    })
    ContentfulLivePreview.init({
      locale,
      debugMode,
      enableLiveUpdates: true,
      enableInspectorMode: true
    })

    contentfulClient
      .getEntry(entryId)
      // @ts-expect-error
      .then((entry) => {
        console.info("[initializeContentfulLivePreview.contentful]", entry)
        fields.forEach((fieldId) => {
          displayFieldData({ entry, fieldId, entryId })
          setupLivePreview({ entry, fieldId, entryId })
        })
      })
      .catch((error: any) =>
        console.error(`[initializeContentfulLivePreview] error`, error)
      )
  }

  function setupLivePreview({
    entry,
    entryId,
    fieldId
  }: {
    entry: contentful.Entry
    entryId: string
    fieldId: string
  }) {
    const callback = (updatedData: any) => {
      console.info("updatedData", updatedData)
      const domElement = findElementByDataAttribute({ entryId, fieldId })
      if (!domElement) return
      console.info(domElement, updatedData.fields, updatedData.fields[fieldId])
      if (domElement && updatedData.fields && updatedData.fields[fieldId]) {
        console.info(updatedData.fields[fieldId])
        // Check if the content is text
        if (typeof updatedData.fields[fieldId] === "string") {
          domElement.textContent = updatedData.fields[fieldId]
        }
        console.info(updatedData.fields[fieldId].nodeType)
        // Check if the content is rich text
        if (updatedData.fields[fieldId].nodeType === "document") {
          domElement.innerHTML = documentToHtmlString(entry.fields[fieldId], {
            preserveWhitespace: true,
            renderMark: {
              [MARKS["ITALIC"]]: (text) => `<em>${text}</em>`,
              [MARKS["UNDERLINE"]]: (text) => `<u>${text}</u>`,
              [MARKS["CODE"]]: (text) => `<code>${text}</code>`,
              [MARKS["STRIKETHROUGH"]]: (text) => `<s>${text}</s>`,
              [MARKS["SUBSCRIPT"]]: (text) => `<sub>${text}</sub>`,
              [MARKS["BOLD"]]: (text) => `<strong>${text}</strong>`,
              [MARKS["SUPERSCRIPT"]]: (text) => `<sup>${text}</sup>`
            },
            renderNode: {
              [BLOCKS["HEADING_1"]]: (node, next) =>
                `<h1>${next(node.content)}</h1>`,
              [BLOCKS["HEADING_2"]]: (node, next) =>
                `<h2>${next(node.content)}</h2>`,
              [BLOCKS["HEADING_3"]]: (node, next) =>
                `<h3>${next(node.content)}</h3>`,
              [BLOCKS["HEADING_4"]]: (node, next) =>
                `<h4>${next(node.content)}</h4>`,
              [BLOCKS["HEADING_5"]]: (node, next) =>
                `<h5>${next(node.content)}</h5>`,
              [BLOCKS["HEADING_6"]]: (node, next) =>
                `<h6>${next(node.content)}</h6>`,
              [BLOCKS["LIST_ITEM"]]: (node, next) =>
                `<li>${next(node.content)}</li>`,
              [BLOCKS["TABLE"]]: (node, next) =>
                `<table>${next(node.content)}</table>`,
              [BLOCKS["TABLE_ROW"]]: (node, next) =>
                `<tr>${next(node.content)}</tr>`,
              [BLOCKS["TABLE_CELL"]]: (node, next) =>
                `<td>${next(node.content)}</td>`,
              [BLOCKS["TABLE_HEADER_CELL"]]: (node, next) =>
                `<th>${next(node.content)}</th>`,
              [BLOCKS["QUOTE"]]: (node, next) =>
                `<blockquote>${next(node.content)}</blockquote>`,
              [BLOCKS["PARAGRAPH"]]: (node, next) =>
                `<p data-contentful-field-id="content" data-contentful-entry-id="${entryId}">${next(node.content)}</p>`,
              [BLOCKS["UL_LIST"]]: (node, next) =>
                `<ul>${next(node.content)}</ul>`,
              [BLOCKS["OL_LIST"]]: (node, next) =>
                `<ol>${next(node.content)}</ol>`,
              [BLOCKS["EMBEDDED_ASSET"]]: (asset) => {
                const dataFields = asset.data.target.fields
                const imageUrl = imageWithProtocol(dataFields.file.url)
                const { width, height } = dataFields.file.details.image
                return `<Image src="${imageUrl}" alt="${dataFields.title}" width={${width}} height={${height}} />`
              },
              [INLINES["HYPERLINK"]]: (params) => /* html */ `
                  <a target="_blank" href="${params.data.uri}" rel="noopener noreferrer">${(params.content.at(0) as any)?.value}</a>`,
              [INLINES["ENTRY_HYPERLINK"]]: (params) => /* html */ `
                    <a target="_blank" href="${params.data.uri}" rel="noopener noreferrer">${(params.content.at(0) as any)?.value}</a>`,
              [INLINES["ASSET_HYPERLINK"]]: (params) => /* html */ `
                    <a target="_blank" href="${params.data.uri}" rel="noopener noreferrer">${(params.content.at(0) as any)?.value}</a>`
            }
          })
        }
      }
    }
    const unsubscribe = ContentfulLivePreview.subscribe({
      callback,
      data: entry,
      locale: "en-US"
    })

    subscriptions.push(unsubscribe)
  }

  function findElementByDataAttribute({
    entryId,
    fieldId
  }: {
    entryId: string
    fieldId: string
  }) {
    if (typeof document === "undefined") return
    return document.querySelector(
      `[data-contentful-entry-id="${entryId}"][data-contentful-field-id="${fieldId}"]`
    )
  }

  const imageWithProtocol = (url: string) => `https:${url}`

  function displayFieldData<T extends contentful.Entry>({
    entry,
    fieldId,
    entryId
  }: {
    entry: T
    fieldId: string
    entryId: string
  }) {
    const domElement = findElementByDataAttribute({ entryId, fieldId })

    if (!domElement) {
      console.error(
        `DOM element with entry ID "${entryId}" and field ID "${fieldId}" not found.`
      )
      return
    }

    if (typeof document === "undefined") return

    if (typeof entry.fields[fieldId] === "string") {
      domElement.textContent = entry.fields[fieldId]
    }
    if (entry.fields[fieldId]?.nodeType === "document") {
      domElement.innerHTML = documentToHtmlString(entry.fields[fieldId], {
        preserveWhitespace: true,
        renderMark: {
          [MARKS["ITALIC"]]: (text) => `<em>${text}</em>`,
          [MARKS["UNDERLINE"]]: (text) => `<u>${text}</u>`,
          [MARKS["CODE"]]: (text) => `<code>${text}</code>`,
          [MARKS["STRIKETHROUGH"]]: (text) => `<s>${text}</s>`,
          [MARKS["SUBSCRIPT"]]: (text) => `<sub>${text}</sub>`,
          [MARKS["BOLD"]]: (text) => `<strong>${text}</strong>`,
          [MARKS["SUPERSCRIPT"]]: (text) => `<sup>${text}</sup>`
        },
        renderNode: {
          [BLOCKS["HEADING_1"]]: (node, next) => {
            console.info(node)
            return `<h1>${next(node.content)}</h1>`
          },
          [BLOCKS["HEADING_2"]]: (node, next) => `<h2>
                <a href="#${next(node.content)}" id="${next(node.content)}">
                  ${next(node.content)}
                </a>
              </h2>`,
          [BLOCKS["HEADING_3"]]: (node, next) =>
            `<h3>
                <a href="#${next(node.content)}" id="${next(node.content)}">
                  ${next(node.content)}
                </a>
              </h3>`,
          [BLOCKS["HEADING_4"]]: (node, next) =>
            `<h4>
                <a href="#${next(node.content)}" id="${next(node.content)}">
                  ${next(node.content)}
                </a>
              </h4>`,
          [BLOCKS["HEADING_5"]]: (node, next) =>
            `<h5>${next(node.content)}</h5>`,
          [BLOCKS["HEADING_6"]]: (node, next) =>
            `<h6>${next(node.content)}</h6>`,
          [BLOCKS["LIST_ITEM"]]: (node, next) =>
            `<li>${next(node.content)}</li>`,
          [BLOCKS["TABLE"]]: (node, next) =>
            `<table>${next(node.content)}</table>`,
          [BLOCKS["TABLE_ROW"]]: (node, next) =>
            `<tr>${next(node.content)}</tr>`,
          [BLOCKS["TABLE_CELL"]]: (node, next) =>
            `<td>${next(node.content)}</td>`,
          [BLOCKS["TABLE_HEADER_CELL"]]: (node, next) =>
            `<th>${next(node.content)}</th>`,
          [BLOCKS["QUOTE"]]: (node, next) =>
            `<blockquote>${next(node.content)}</blockquote>`,
          [BLOCKS["PARAGRAPH"]]: (node, next) =>
            `<p data-contentful-field-id="content" data-contentful-entry-id="${entryId}">${next(node.content)}</p>`,
          [BLOCKS["UL_LIST"]]: (node, next) => `<ul>${next(node.content)}</ul>`,
          [BLOCKS["OL_LIST"]]: (node, next) => `<ol>${next(node.content)}</ol>`,
          [BLOCKS["EMBEDDED_ASSET"]]: (asset) => {
            const dataFields = asset.data.target.fields
            const imageUrl = imageWithProtocol(dataFields.file.url)
            const { width, height } = dataFields.file.details.image
            return `<Image src="${imageUrl}" alt="${dataFields.title}" width={${width}} height={${height}} />`
          },
          [INLINES["HYPERLINK"]]: (params) => /* html */ `
                  <a target="_blank" href="${params.data.uri}" rel="noopener noreferrer">${(params.content.at(0) as any)?.value}</a>`,
          [INLINES["ENTRY_HYPERLINK"]]: (params) => /* html */ `
                    <a target="_blank" href="${params.data.uri}" rel="noopener noreferrer">${(params.content.at(0) as any)?.value}</a>`,
          [INLINES["ASSET_HYPERLINK"]]: (params) => /* html */ `
                    <a target="_blank" href="${params.data.uri}" rel="noopener noreferrer">${(params.content.at(0) as any)?.value}</a>`
        }
      })
    }
  }
</script>

<script is:inline type="module" src="/scripts/anchor-targets.js"></script>

<style is:inline lang="postcss">
  blockquote {
    border-left: 2px solid #a0dbfdd3;
    padding-left: 1.5rem;
    margin-left: 0;
  }
  h1 {
    color: white !important; 
  }
  img {
    width: 100%;
    height: auto;
    object-fit: cover;
    border-radius: 8px !important;
  }

  p > a, ul a:not(header a), ol a:not(header a) {
    text-decoration: underline;
    text-decoration-color: #A0ECFD !important;
    transition: border-bottom-color 0.2s ease-in-out;
    color: #A0ECFD !important;
  }

  p, q, blockquote {
    margin-bottom: 1rem;
    color: #D1D5DB;
  }


  p > a:hover {
    color: #A0ECFD;
  }

  ol, ul {
    li {
      color: #D1D5DB;
    }
    margin-bottom: 1rem;
  }
  @media (max-width: 640px) {
    p > a:hover {
      color: #A0ECFD;
      text-decoration-color: #fff !important;
    }
    h2 {
      font-size: 1.5rem !important;
    }
  }

  h2,h3,h4,h5 {
    margin-top: 2rem;
    margin-bottom: 0rem;
    font-size: 1.87rem;
    color: #ffffff;
  }

  h2::after, h3::after, h4::after, h5::after {
    content: "#";
    color: #ffffff;
    margin-left: 0.5rem;
    font-size: 1.5rem;
    position: relative;
    visibility: hidden;
  }

  h2:hover::after, h3:hover::after, h4:hover::after, h5:hover::after {
    visibility: visible;
  }

  *::selection {
    background-color: #A0ECFD;
    color: #000;
  }
</style>
